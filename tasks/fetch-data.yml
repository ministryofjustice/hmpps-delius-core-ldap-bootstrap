---

- name: Roles/groups
  block:
    - name: (fetch-data.roles) Download role catalogues
      aws_s3:
        bucket: '{{ s3_dependencies_bucket }}'
        object: '/dependencies/delius-core/NDelius-{{ ndelius_version }}/scripts/User Data Store/{{ item }}'
        dest: '{{ workspace }}/{{ item }}'
        mode: get
      with_items:
        - nd_role_catalogue.ldif
        - nd_role_groups.ldif

    - name: (fetch-data.roles) Replace base context in role catalogues
      replace:
        path: '{{ workspace }}/{{ item }}'
        regexp: '(?i)cn=Users,dc=pcms,dc=internal'
        replace: '{{ base_users }}'
      with_items:
        - nd_role_catalogue.ldif
        - nd_role_groups.ldif

    - name: (fetch-data.roles) Ensure boolean values are in uppercase
      replace:
        path: '{{ workspace }}/nd_role_catalogue.ldif'
        regexp: '(?i)^(.+?:\s*?){{ item }}\s*?$'
        replace: '\1{{ item }}'
      with_items:
        - 'TRUE'
        - 'FALSE'

- name: Users
  when: import_users_ldif != ''
  block:
    - name: (fetch-data.users) Create directory
      file:
        path: '{{ workspace }}/{{ import_users_ldif | dirname }}'
        state: directory
        recurse: yes

    - name: (fetch-data.users) Download LDIF
      aws_s3:
        bucket: '{{ s3_backups_bucket }}'
        object: '{{ import_users_ldif }}'
        dest: '{{ workspace }}/{{ import_users_ldif }}'
        mode: get

    - name: (fetch-data.users) Remove service users and roles, so we can re-add them with the desired details
      replace:
        path: '{{ workspace }}/{{ import_users_ldif }}'
        regexp: '{{ item.regexp }}'
        replace: '{{ item.replace }}'
      with_items:
        # Unwrap lines to make it easier when searching:
        - { regexp: '\n ([^\n])', replace: '\1' }
        # Remove blocks for service users/groups eg. Cxx, SPG, ALF, IAPS-User, IAPS-Group etc
        - { regexp: '(?i)^dn:.*eisusers[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)^dn:.*cn=SPG,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)^dn:.*cn=ALF,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)^dn:.*cn=c\d{2},[\w\W]+?\n\n', replace: '' }
        # Remove role/group catalogues
        - { regexp: '(?i)^dn:.*cn=ndrolecatalogue,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)^dn:.*cn=ndrolegroups,[\w\W]+?\n\n', replace: '' }
        # Ensure boolean values are uppercase
        - { regexp: '(?i)^(.+?:\s*?)true\s*?$', replace: '\1TRUE' }
        - { regexp: '(?i)^(.+?:\s*?)false\s*?$', replace: '\1FALSE' }

    - name: (fetch-data.users) Remove any parent entries
      replace:
        path: '{{ workspace }}/{{ import_users_ldif }}'
        regexp: "(?i)^dn: {{ item }}[\\w\\W]+?\n\n"
        replace: ''
      with_items: "{{ import_users_ldif_base_users.split(',') }}"

    - name: (fetch-data.users) Replace context values
      replace:
        path: '{{ workspace }}/{{ import_users_ldif }}'
        regexp: '{{ import_users_ldif_base_users }}'
        replace: '{{ base_users }}'

    - name: (fetch-data.users) Remove Oracle-specific stuff
      when: sanitize_oid_ldif
      replace:
        path: '{{ workspace }}/{{ import_users_ldif }}'
        regexp: '{{ item.regexp }}'
        replace: '{{ item.replace }}'
      with_items:
        # Remove oracle default users:
        - { regexp: '(?i)^dn:.*cn=orcladmin,[\w\W]+?\n\n', replace: '' }
        - { regexp: '(?i)^dn:.*cn=public,[\w\W]+?\n\n', replace: '' }
        # Replace oracle start/end date attributes with out own:
        - { regexp: '(?i)^orclActiveStartDate: ', replace: 'startDate: ' }
        - { regexp: '(?i)^orclActiveEndDate: ', replace: 'endDate: ' }
        # Remove oracle objectclasses:
        - { regexp: '(?i)^objectclass: orcl.+?\n', replace: '' }
        # Remove oracle attributes:
        - { regexp: '(?i)^orcl.+?\n', replace: '' }
        - { regexp: '(?i)^authpassword.+?\n', replace: '' }
        - { regexp: '(?i)^krbprincipalname.+?\n', replace: '' }
        # Fix to handle incorrect context set on aliasedobjectname attributes:
        - { regexp: '(?i)(aliasedobjectname:.+?,cn=ndRoleCatalogue,).+?\n', replace: '\1{{ base_users }}\n' }

    - name: (fetch-data.users) Sort LDIF hierarchically
      shell: >
        cp {{ workspace }}/{{ import_users_ldif }} {{ workspace }}/{{ import_users_ldif }}.orig;
        cat {{ workspace }}/{{ import_users_ldif }} | {{ workspace }}/ldif-sort.sh > {{ workspace }}/{{ import_users_ldif }}-sorted &&
        mv {{ workspace }}/{{ import_users_ldif }}-sorted {{ workspace }}/{{ import_users_ldif }}
