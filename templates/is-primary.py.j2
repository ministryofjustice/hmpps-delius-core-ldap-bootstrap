"""Primary Instance Election

Runs a HTTP server exposing a 'GET /is-primary' endpoint, which will return a 200 response for only a single instance
in a cluster (the primary instance), and a 500 response for any other (non-primary) instance. A load-balancer can
then route all traffic to this instance, and any non-primary instances can act as replicas. If the primary instance
fails, the '/is-primary' method will begin returning a 500 response and another instance will immediately start
returning a 200 response. This means the service can automatically failover to the new primary with minimal delay.

Leader election is performed using a simple bully algorithm. This works by always electing the longest running
instance as the primary. This ensures we have a deterministic way of always knowing which instance is primary, and
ensures that any new instance that is added to the cluster doesn't trigger an immediate failover.
See: https://en.wikipedia.org/wiki/Leader_election
"""

import socket
import socketserver
import time
from http.server import BaseHTTPRequestHandler, HTTPServer

import boto3
import jmespath
import requests

ASG_NAME = '{{ environment_name }}-ldap'
SERVICE_PORT = int('{{ ldap_port }}')


def is_healthy():
    """Checks whether the local LDAP server is responding"""

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', SERVICE_PORT)) == 0


def get_instance_ips():
    """Return the IP addresses of running instances in the auto-scaling group"""

    ec2 = boto3.client('ec2', region_name='{{ region }}')
    instances = ec2.describe_instances(Filters=[{
        'Name': 'tag:aws:autoscaling:groupName',
        'Values': [ASG_NAME]
    }, {
        'Name': 'instance-state-name',
        'Values': ['running']
    }])
    instance_ips = jmespath.search('Reservations[*].Instances[*].[PrivateIpAddress][0][0]', instances)
    print(f'Instances: {instance_ips}')
    return instance_ips


class MyHandler(BaseHTTPRequestHandler):
    start_time = time.time()
    print(f'Starting HTTPServer with id={start_time} ...')

    def send_response_with_body(self, code, body=''):
        self.send_response(code)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(bytes(body, 'utf-8'))

    def do_GET(self):
        if self.path == '/id':
            # If healthy, return a success response with the current server's start time (in seconds)
            self.send_response_with_body(200 if is_healthy() else 500, str(self.start_time))

        elif self.path == '/is-primary':
            # Find the earliest start-time (ie. highest uptime) of all running nodes
            min_start_time = float('inf')
            for instance_ip in get_instance_ips():
                try:
                    print(f'Fetching id for instance={instance_ip} ...')
                    response = requests.get(f'http://{instance_ip}/id', timeout=5)
                    response.raise_for_status()
                    print(f'ip={instance_ip} id={response.text}')
                    min_start_time = min(float(response.text), min_start_time)
                except Exception as e:
                    print(f'Unable to get id for ip={instance_ip}', e)
                    pass
            # Return 200 if current server is the primary (has earliest start time), otherwise return 500
            self.send_response_with_body(200 if abs(min_start_time - self.start_time) < 1e-06 else 500)

        else:
            self.send_response_with_body(404)


class ThreadedHTTPServer(socketserver.ThreadingMixIn, HTTPServer):
    daemon_threads = True


if __name__ == "__main__":
    httpd = ThreadedHTTPServer(('', 80), MyHandler)
    httpd.serve_forever()
